#!/bin/bash
# -----------------------------------------------------------------------
#   Uninstall kernel.
#   Author: Mario Roy - http://github.com/marioroy
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, version 2 or later of the License.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------

if [[ "$1" == "all" ]]; then

    # deprecated
    bash "$0" "clear-default" || exit $?
    bash "$0" "clear-preempt" || exit $?
    bash "$0" "edge-default"  || exit $?
    bash "$0" "edge-preempt"  || exit $?
    bash "$0" "main-default"  || exit $?
    bash "$0" "main-preempt"  || exit $?
    bash "$0" "lts-default"   || exit $?
    bash "$0" "lts-preempt"   || exit $?
    bash "$0" "rt-preempt"    || exit $?

    # since April 2024
    bash "$0" "bore"  || exit $?
    bash "$0" "clear" || exit $?
    bash "$0" "echo"  || exit $?
    bash "$0" "edge"  || exit $?

    exit 0
fi

# shellcheck disable=SC2012,SC2046

# Capture the live kernel release, for safety to not remove self.

kversion="$(uname -r)"       # e.g 6.1.54-100.xmedge
kvariant="${kversion}"
kvariant="${kvariant##*.}"   # xmedge
kversion="${kversion%.*}"    # 6.1.54-100

function xm_uninstall {
    variant="$1" release="$2"

    if [[ -n "$release" ]]; then
        # Uninstall given variant release (e.g. 100), skipping live kernel.
        for kernel in $(sudo clr-boot-manager list-kernels | sed "s/\*//"); do
            if [[ "${kernel}z" =~ org\.clearlinux\.${variant}\..*-${release}z ]]; then
                if [[ "$kernel" == "org.clearlinux.${kvariant}.${kversion}" ]]; then
                    echo "Skipping live kernel ${kernel}"
                else
                    echo "Removing ${kernel}"
                    sudo clr-boot-manager remove-kernel "$kernel" || exit 2
                fi
            fi
        done

        sudo rpm -e $( rpm -qa |\
            grep "^linux-${variant}-.*-${release}\.x86_64" |\
            grep -v "^linux-${kvariant}-.*-${kversion}.x86_64$" ) 2>/dev/null

    else
        # Uninstall variant (all releases), skipping live kernel.
        for kernel in $(sudo clr-boot-manager list-kernels | sed "s/\*//"); do
            if [[ "${kernel}" =~ org\.clearlinux\.${variant}\. ]]; then
                if [[ "$kernel" == "org.clearlinux.${kvariant}.${kversion}" ]]; then
                    echo "Skipping live kernel ${kernel}"
                else
                    echo "Removing ${kernel}"
                    sudo clr-boot-manager remove-kernel "$kernel" || exit 2
                fi
            fi
        done

        sudo rpm -e $( rpm -qa |\
            grep "^linux-${variant}-" |\
            grep -v "^linux-${kvariant}-.*-${kversion}.x86_64$" ) 2>/dev/null

    fi

    # Create default symbolic link if another release exists on the system.

    cd "/usr/lib/kernel" || exit 1
    sudo rm -f "default-${variant}"

    other_kernel=$(ls -1t "org.clearlinux.${variant}".* 2>/dev/null | head -1)

    if [[ -n "$other_kernel" ]]; then
        sudo ln -sf "$other_kernel" "default-${variant}"
    fi
}

case "$1" in
    bore | clear | echo | edge )
        xm_uninstall "xm${1}" "$2"
        ;;
    clear-default | clear-preempt )
        xm_uninstall "xm${1}" "$2"
        ;;
    edge-default | edge-preempt )
        xm_uninstall "xm${1}" "$2"
        ;;
    main-default | main-preempt )
        xm_uninstall "xm${1}" "$2"
        ;;
    lts-default | lts-preempt )
        xm_uninstall "xm${1}" "$2"
        ;;
    rt-preempt )
        xm_uninstall "xm${1}" "$2"
        ;;

    * ) echo "synopsis"
        echo "   $0 all"
        echo "   $0 bore  [<release>]"
        echo "   $0 clear [<release>]"
        echo "   $0 echo  [<release>]"
        echo "   $0 edge  [<release>]"
        echo ""
        echo "deprecated"
        echo "   $0 clear-default | clear-preempt [<release>]"
        echo "   $0 edge-default | edge-preempt [<release>]"
        echo "   $0 main-default | main-preempt [<release>]"
        echo "   $0 lts-default | lts-preempt [<release>]"
        echo "   $0 rt-preempt [<release>]"
        echo ""
esac

