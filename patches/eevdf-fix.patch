From b0b12533652e7c160e66cc0bede6995fdfb36ba6 Mon Sep 17 00:00:00 2001
From: Masahito S <firelzrd@gmail.com>
Date: Sat, 10 Feb 2024 13:19:09 +0900
Subject: EEVDF fix patch set revised (Thanks to dvernet)

* Fix: reweight_eevdf(): Deadline only becomes earlier after rescaling
* Fix: Use div64_s64(s64, s64) instead of div_s64(s64, s32) where the divisor may reach 64 bits
* Fix: se->load.weight == 0 might cause failure of eligibility test

(They are already integrated in the latest EEVDF-BORE patches)

---
 kernel/sched/fair.c | +++++++++++++++++---------
 1 file changed, 17 insertions(+), 9 deletions(-)

diff -uar a/kernel/sched/fair.c b/kernel/sched/fair.c
--- a/kernel/sched/fair.c	2024-02-07 09:11:56.000000000 -0600
+++ b/kernel/sched/fair.c	2024-02-12 20:20:18.688686475 -0600
@@ -638,10 +638,18 @@
  *
  * As measured, the max (key * weight) value was ~44 bits for a kernel build.
  */
+static unsigned long entity_weight(struct sched_entity *se) {
+	unsigned long weight = se->load.weight;
+#ifdef CONFIG_64BIT
+	weight >>= SCHED_FIXEDPOINT_SHIFT;
+#endif
+	return max(1UL, weight);
+}
+
 static void
 avg_vruntime_add(struct cfs_rq *cfs_rq, struct sched_entity *se)
 {
-	unsigned long weight = scale_load_down(se->load.weight);
+	unsigned long weight = entity_weight(se);
 	s64 key = entity_key(cfs_rq, se);
 
 	cfs_rq->avg_vruntime += key * weight;
@@ -651,7 +659,7 @@
 static void
 avg_vruntime_sub(struct cfs_rq *cfs_rq, struct sched_entity *se)
 {
-	unsigned long weight = scale_load_down(se->load.weight);
+	unsigned long weight = entity_weight(se);
 	s64 key = entity_key(cfs_rq, se);
 
 	cfs_rq->avg_vruntime -= key * weight;
@@ -678,7 +686,7 @@
 	long load = cfs_rq->avg_load;
 
 	if (curr && curr->on_rq) {
-		unsigned long weight = scale_load_down(curr->load.weight);
+		unsigned long weight = entity_weight(curr);
 
 		avg += entity_key(cfs_rq, curr) * weight;
 		load += weight;
@@ -688,7 +696,7 @@
 		/* sign flips effective floor / ceil */
 		if (avg < 0)
 			avg -= (load - 1);
-		avg = div_s64(avg, load);
+		avg = div64_s64(avg, load);
 	}
 
 	return cfs_rq->min_vruntime + avg;
@@ -745,7 +753,7 @@
 	long load = cfs_rq->avg_load;
 
 	if (curr && curr->on_rq) {
-		unsigned long weight = scale_load_down(curr->load.weight);
+		unsigned long weight = entity_weight(curr);
 
 		avg += entity_key(cfs_rq, curr) * weight;
 		load += weight;
@@ -3749,7 +3757,7 @@
 	 */
 	vslice = (s64)(se->deadline - avruntime);
 	vslice = div_s64(vslice * old_weight, weight);
-	se->deadline = avruntime + vslice;
+	se->deadline = min_vruntime(se->deadline, avruntime + vslice);
 }
 
 static void reweight_entity(struct cfs_rq *cfs_rq, struct sched_entity *se,
@@ -5155,12 +5163,12 @@
 		 */
 		load = cfs_rq->avg_load;
 		if (curr && curr->on_rq)
-			load += scale_load_down(curr->load.weight);
+			load += entity_weight(curr);
 
-		lag *= load + scale_load_down(se->load.weight);
+		lag *= load + entity_weight(se);
 		if (WARN_ON_ONCE(!load))
 			load = 1;
-		lag = div_s64(lag, load);
+		lag = div64_s64(lag, load);
 	}
 
 	se->vruntime = vruntime - lag;
-- 
2.34.1

